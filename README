
file:///C:/Users/marco/Desktop/UNI/A%C3%91O%204/INTEGRACION%20DE%20APLICACIONES/Practica2/Documentaci%C3%B3n%20API%20RESTful%20para%20Tienda%20de%20Mascotas.pdf
file:///C:/Users/marco/Desktop/UNI/A%C3%91O%204/INTEGRACION%20DE%20APLICACIONES/final_project/PROYECTO%20FINAL%20INTEGRACI%C3%93N%20DE%20APLICACIONES.pdf

https://github.com/jlfg-evereven/ucjc-ida/blob/main/kong-api-gateway/README.md


https://minikube.sigs.k8s.io/docs/handbook/addons/kong-ingress/



# Instalar docker (si se requiere)
sudo apt update
sudo apt install docker.io
sudo systemctl start docker
sudo systemctl enable docker

# Instalar kubectl
sudo apt install -y apt-transport-https ca-certificates curl
sudo snap install kubectl --classic
kubectl version --client

# Instalar minikube (chequear si la arquitectura es arm o amd)
dpkg --print-architecture
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
minikube version

# Arrancar minikube con docker driver
minikube start --driver=docker

# Istio

# Descargar Istio
curl -L https://istio.io/downloadIstio | sh -

# Moverse al directorio de Istio
cd istio-1.x.x

# A침adir istioctl al PATH
export PATH=$PWD/bin:$PATH

# Instalar Istio con perfil demo
istioctl install --set profile=demo -y

#Chequear el deployment
kubectl -n istio-system get deploy

# Habilitar inyecci칩n autom치tica de sidecar en el namespace default
kubectl label namespace default istio-injection=enabled


# Raiz del proyecto
eval $(minikube docker-env)

# Se crean las imagenes
docker build -t cart-service:latest ./logic/cart-service
docker build -t category-service:latest ./logic/category-service
docker build -t order-service:latest ./logic/order-service
docker build -t product-service:latest ./logic/product-service
docker build -t review-service:latest ./logic/review-service
docker build -t search-service:latest ./logic/search-service
docker build -t user-service:latest ./logic/user-service
docker build -t postgres-service:latest ./database


# Se crean los servicios y se aplican todos los yml
kubectl apply -f logic/cart-service/kube/
kubectl apply -f logic/category-service/kube/
kubectl apply -f logic/order-service/kube/
kubectl apply -f logic/product-service/kube/
kubectl apply -f logic/review-service/kube/
kubectl apply -f logic/search-service/kube/
kubectl apply -f logic/user-service/kube/
kubectl apply -f database/deployment.yml
kubectl apply -f database/service.yml
kubectl apply -f database/create-tables-job.yml

# Si hay un problema en la imagen de postgres
# Comprueba que esta la imagen postgres 
docker images
kubectl delete pod -l app=postgres
kubectl apply -f database/deployment.yml

# En caso de que este en not ready el pod de create tables y no se hayan creado las tablas, borrar 
kubectl delete pod -l app=postgres
kubectl delete pod <pod de createtables>

# Comprobamos que todo esta correcto
kubectl get pods -n default
kubectl get svc -n default


# En caso de que no se cargen las imagenes meterlas en el docker hub
docker tag cart-service:latest <usuarioDocker>/cart-service:latest
docker push marcossp32/cart-service:latest

docker tag category-service:latest marcossp32/category-service:latest
docker push marcossp32/category-service:latest

docker tag order-service:latest marcossp32/order-service:latest
docker push marcossp32/order-service:latest

docker tag product-service:latest marcossp32/product-service:latest
docker push marcossp32/product-service:latest

docker tag review-service:latest marcossp32/review-service:latest
docker push marcossp32/review-service:latest

docker tag search-service:latest marcossp32/search-service:latest
docker push marcossp32/search-service:latest

docker tag user-service:latest marcossp32/user-service:latest
docker push marcossp32/user-service:latest

docker tag petstore-database:latest marcossp32/petstore-database:latest
docker push marcossp32/petstore-database:latest

# Comprobamos que todo esta correcto
kubectl get pods -n default

# Si se quiere comprobar que las tablas han sido creadas y estan en el servicio de postgres
kubectl exec -it <pod de postgres> -- bash
psql -U postgres -d petstore
\dt para ver todas las tablas



# Kong
minikube addons enable kong

# En otra terminal
minikube tunnel

# Instalar CRD faltantes
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml

# Poner NodePort en vez de LoadBalancer
kubectl edit svc kong-proxy -n kong




# ClusterRole
kubectl edit clusterrole kong-ingress

# Meter esto
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumergroups
  verbs:
  - get
  - list
  - watch

# Y en el final en customresourcedefinitions
 verbs:
  - list
  - watch

kubectl rollout restart deployment ingress-kong -n kong




# Curl para probar el signup:
curl.exe -X POST `
  --url "http://127.0.0.1:8000/api/users/register" `
  --header "Content-Type: application/json" `
  --data @"
{
  "username": "nuevo_usuario",
  "password": "contrase침a_segura",
  "email": "nuevo_usuario@example.com",
  "firstName": "Nombre",
  "lastName": "Apellido",
  "phoneNumber": "123456789"
}
"@
